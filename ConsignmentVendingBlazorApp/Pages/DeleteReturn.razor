@page "/deletereturn/{id:int}"

@using DataAccessLibrary
@using DataAccessLibrary.Models

@inject NavigationManager NavigationManager
@inject IReturnsData _db

@if (item is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Confirm Delete</h3>
    <p>Are you sure you want to delete this return with ID: <b>@id</b></p>
    <br />
    <div class="col-md-4">
        <table class="table">
            <thead>
                <tr>
                    <th>Cono</th>
                    <th>Customer Number</th>
                    <th>Ship To</th>
                    <th>Whse</th>
                    <th>Replenex Number</th>
                    <th>Qty</th>
                    <th>Unit of Issue</th>
                </tr>
            </thead>
            <tr>
                <td>@item[0].Cono</td>
                <td>@item[0].CustomerNumber</td>
                <td>@item[0].ShipTo</td>
                <td>@item[0].Whse</td>
                <td>@item[0].ReplenexNumber</td>
                <td>@item[0].Qty</td>
                <td>@item[0].UnitOfIssue</td>

            </tr>
        </table>
        <button type="submit" class="btn btn-danger" @onclick="DeleteRecord">DELETE</button>
        <button type="button" class="btn btn-primary" @onclick="NavToReturns">CANCEL</button>
    </div>
}

@code {
    [Parameter]
    public int id { get; set; }
    private List<ReturnModel> item;

    protected override async Task OnInitializedAsync()
    {
        item = await _db.GetSingleReturn(id);
    }

    private async Task DeleteRecord()
    {
        await _db.DeleteRecord(id);
        NavToReturns();
    }

    private void NavToReturns()
    {
        NavigationManager.NavigateTo("returns");
    }

}