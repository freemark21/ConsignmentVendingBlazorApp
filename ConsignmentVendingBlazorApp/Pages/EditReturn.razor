@page "/editreturn/{id:int}"

@using DataAccessLibrary
@using DataAccessLibrary.Models

@inject NavigationManager NavigationManager
@inject IReturnsData _db

@if (item is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Edit</h3>
    <div class="col-md-4">
        <form>
            <div class="form-group">
                <label for="Cono">Cono</label>
                <input type="text" readonly class="form-control" @bind-value="@item[0].Cono">
            </div>
            <div class="form-group">
                <label for="CustomerNumber">Customer Number</label>
                <input type="text" readonly class="form-control" @bind-value="@item[0].CustomerNumber">
            </div>
            <div class="form-group">
                <label for="ShipTo">Ship To</label>
                <input type="text" readonly class="form-control" @bind-value="@item[0].ShipTo">
            </div>
            <div class="form-group">
                <label for="Whse">Whse</label>
                <input type="text" readonly class="form-control" @bind-value="@item[0].Whse">
            </div>
            <div class="form-group">
                <label for="ReplenexNumber">Replenex Part#</label>
                <input type="text" readonly class="form-control" @bind-value="@item[0].ReplenexNumber">
            </div>
            <div class="form-group">
                <label for="Qty">Qty</label>
                <input type="number" class="form-control" @bind-value="@item[0].Qty">
            </div>
            <div class="form-group">
                <label for="UnitOfIssue">Unit of Issue</label>
                <input type="text" class="form-control" @bind-value="@item[0].UnitOfIssue">
            </div>
            <button type="button" class="btn btn-success" @onclick="SaveRecord">SAVE</button>
            <button type="button" class="btn btn-primary" @onclick="NavToReturns">CANCEL</button>
        </form>
    </div>
}
@code {
    [Parameter]
    public int id { get; set; }
    private List<ReturnModel> item = null;
    

    protected override async Task OnInitializedAsync()
    {
        item = await _db.GetSingleReturn(id);
        
    }

    private async Task SaveRecord()
    {
        await _db.SaveRecord(item[0]);
        NavToReturns();
    }

    private void NavToReturns()
    {
        NavigationManager.NavigateTo("returns");
    }

}

